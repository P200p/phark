'use client'

import { useState, useEffect, useRef } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Label } from '@/components/ui/label'
import { Progress } from '@/components/ui/progress'
import { Separator } from '@/components/ui/separator'
import { User, MessageCircle, Heart, Share2, ShoppingCart, Wallet, Star, Gift, TrendingUp, Users, Settings, Plus, Coins, Trophy, Crown, Zap, Target, Share as Shark, PiggyBank, Store, CreditCard, DollarSign, HandCoins, Gamepad2, Sparkles, Eye, ThumbsUp, ThumbsDown, MessageSquare, Send, Bell, Search, Filter, MoreHorizontal, ExternalLink, Lock, Unlock, ShieldCheck, Shield, AlertTriangle, Info, CheckCircle, XCircle, Calendar, Clock, TrendingDown, ArrowUp, ArrowDown, BarChart3, PieChart, Activity, Flame, Fish, Waves, GripVertical, Move } from 'lucide-react'

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
const mockUser = {
  id: '1',
  name: '‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ',
  username: '@somchai_shark',
  avatar: 'https://images.pexels.com/photos/1674752/pexels-photo-1674752.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&fit=crop',
  bio: '‡∏ô‡∏±‡∏Å‡πÄ‡∏ó‡∏£‡∏î Crypto ‡πÅ‡∏•‡∏∞ Social Media Influencer ü¶à',
  credits: 15420,
  level: 12,
  followers: 2340,
  following: 890,
  posts: 156,
  verified: true,
  joinDate: '2024-01-15',
  lastActive: '‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå',
  reputation: 4.8,
  totalLoaned: 85000,
  totalBorrowed: 23000,
  successfulTrades: 47,
  profileTheme: 'shark-blue',
  badges: ['‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏∑‡∏≠‡∏ó‡∏≠‡∏á', '‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ', '‡∏≠‡∏¥‡∏ô‡∏ü‡∏•‡∏π‡πÄ‡∏≠‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏£‡∏∞‡∏î‡∏±‡∏ö A'],
  currentPet: {
    name: '‡∏ä‡∏≤‡∏£‡πå‡∏Å‡∏µ‡πâ',
    type: 'Baby Shark',
    level: 8,
    creditsPerHour: 25,
    image: 'ü¶à'
  }
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á
const initialPosts = [
  {
    id: '1',
    user: mockUser,
    content: '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡πÑ‡∏î‡πâ 2,500 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï! üöÄ ‡πÉ‡∏Ñ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÄ‡∏ó‡∏£‡∏î‡∏°‡∏≤‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞ #SharkTrading #‡∏Å‡∏≥‡πÑ‡∏£‡πÉ‡∏´‡∏ç‡πà',
    image: 'https://images.pexels.com/photos/730547/pexels-photo-730547.jpeg?auto=compress&cs=tinysrgb&w=600&h=400&fit=crop',
    likes: 234,
    dislikes: 12,
    comments: 45,
    shares: 18,
    timestamp: '2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß',
    tags: ['‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á', '‡∏Å‡∏≥‡πÑ‡∏£', '‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö'],
    position: { x: 0, y: 0 },
    isLocked: false
  },
  {
    id: '2',
    user: { ...mockUser, name: '‡πÅ‡∏≠‡∏ô‡∏ô‡∏≤ ‡∏™‡∏ï‡∏≤‡∏£‡πå', username: '@anna_star' },
    content: '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï 10,000 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï ‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ 2% ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô ‡∏Ñ‡∏∑‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô üìà ‡πÉ‡∏Ñ‡∏£‡∏™‡∏ô‡πÉ‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!',
    likes: 156,
    dislikes: 8,
    comments: 32,
    shares: 12,
    timestamp: '4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß',
    tags: ['‡πÉ‡∏´‡πâ‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°', '‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏î‡∏µ', '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ'],
    position: { x: 0, y: 0 },
    isLocked: false
  },
  {
    id: '3',
    user: { ...mockUser, name: '‡πÄ‡∏à‡∏°‡∏™‡πå ‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏î‡∏≠‡∏£‡πå', username: '@james_trader' },
    content: '‡∏û‡∏∂‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ò‡∏µ‡∏° Golden Shark ‡πÉ‡∏´‡∏°‡πà ‡∏™‡∏ß‡∏¢‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢! ‚ú® ‡πÉ‡∏Ñ‡∏£‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏¢ ‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å',
    image: 'https://images.pexels.com/photos/844124/pexels-photo-844124.jpeg?auto=compress&cs=tinysrgb&w=600&h=400&fit=crop',
    likes: 89,
    dislikes: 3,
    comments: 21,
    shares: 7,
    timestamp: '6 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß',
    tags: ['‡∏ò‡∏µ‡∏°', '‡∏ä‡πâ‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á', '‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥'],
    position: { x: 0, y: 0 },
    isLocked: false
  }
]

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
const mockShopItems = [
  {
    id: '1',
    name: '‡∏ò‡∏µ‡∏° Golden Shark',
    description: '‡∏ò‡∏µ‡∏°‡∏™‡∏µ‡∏ó‡∏≠‡∏á‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏à‡∏¥‡∏î‡∏à‡∏£‡∏≤',
    price: 2500,
    image: 'https://images.pexels.com/photos/844124/pexels-photo-844124.jpeg?auto=compress&cs=tinysrgb&w=300&h=300&fit=crop',
    category: '‡∏ò‡∏µ‡∏°',
    rarity: 'Epic',
    sales: 1250,
    rating: 4.9
  },
  {
    id: '2',
    name: 'Baby Shark Pet',
    description: '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏ú‡∏•‡∏¥‡∏ï‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏´‡πâ 25/‡∏ä‡∏°.',
    price: 5000,
    image: 'https://images.pexels.com/photos/1076758/pexels-photo-1076758.jpeg?auto=compress&cs=tinysrgb&w=300&h=300&fit=crop',
    category: '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á',
    rarity: 'Legendary',
    sales: 890,
    rating: 4.8
  },
  {
    id: '3',
    name: 'VIP Profile Frame',
    description: '‡∏Å‡∏£‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å VIP',
    price: 1500,
    image: 'https://images.pexels.com/photos/1509428/pexels-photo-1509428.jpeg?auto=compress&cs=tinysrgb&w=300&h=300&fit=crop',
    category: '‡∏Å‡∏£‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå',
    rarity: 'Rare',
    sales: 2100,
    rating: 4.7
  },
  {
    id: '4',
    name: 'Emoji Pack Premium',
    description: '‡∏ä‡∏∏‡∏î‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å',
    price: 800,
    image: 'https://images.pexels.com/photos/1591447/pexels-photo-1591447.jpeg?auto=compress&cs=tinysrgb&w=300&h=300&fit=crop',
    category: '‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥',
    rarity: 'Common',
    sales: 3400,
    rating: 4.6
  }
]

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏à‡∏≥‡∏•‡∏≠‡∏á
const mockLoans = [
  {
    id: '1',
    borrower: '‡∏™‡∏°‡∏®‡∏£‡∏µ ‡πÉ‡∏à‡∏î‡∏µ',
    amount: 5000,
    interestRate: 1.5,
    duration: '3 ‡∏ß‡∏±‡∏ô',
    status: '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',
    purpose: '‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡πÄ‡∏ó‡∏°‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤',
    reputation: 4.2,
    collateral: '‡∏ò‡∏µ‡∏° Premium Collection'
  },
  {
    id: '2',
    borrower: '‡∏ß‡∏¥‡∏ô‡∏±‡∏¢ ‡∏ô‡∏±‡∏Å‡∏•‡∏á‡∏ó‡∏∏‡∏ô',
    amount: 10000,
    interestRate: 2.0,
    duration: '7 ‡∏ß‡∏±‡∏ô',
    status: '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß',
    purpose: '‡∏•‡∏á‡∏ó‡∏∏‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏î‡∏¥‡πâ‡∏á',
    reputation: 4.8,
    collateral: 'Pet Collection Level 10+'
  },
  {
    id: '3',
    borrower: '‡∏°‡∏≤‡∏ô‡∏µ ‡πÄ‡∏ó‡∏£‡∏î‡πÄ‡∏î‡∏≠‡∏£‡πå',
    amount: 3000,
    interestRate: 1.8,
    duration: '5 ‡∏ß‡∏±‡∏ô',
    status: '‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏•‡πâ‡∏ß',
    purpose: '‡∏ã‡∏∑‡πâ‡∏≠‡∏ò‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà',
    reputation: 4.5,
    collateral: 'VIP Membership'
  }
]

// Type definitions for better TypeScript support
interface Post {
  id: string;
  user: typeof mockUser;
  content: string;
  image?: string;
  likes: number;
  dislikes: number;
  comments: number;
  shares: number;
  timestamp: string;
  tags: string[];
  position: { x: number; y: number };
  isLocked: boolean;
}

export default function Home() {
  const [activeTab, setActiveTab] = useState('feed')
  const [newPost, setNewPost] = useState('')
  const [selectedLoan, setSelectedLoan] = useState(null)
  const [loanAmount, setLoanAmount] = useState('')
  const [loanInterest, setLoanInterest] = useState('')
  const [loanDuration, setLoanDuration] = useState('')
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Drag & Drop
  const [posts, setPosts] = useState<Post[]>(initialPosts)
  const [draggedPost, setDraggedPost] = useState<Post | null>(null)
  const [isDragMode, setIsDragMode] = useState(false)
  const [dragOffset, setDragOffset] = useState({ x: 0, y: 0 })
  const feedContainerRef = useRef<HTMLDivElement>(null)

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Drag & Drop
  const handleMouseDown = (e: React.MouseEvent, post: Post) => {
    if (!isDragMode) return
    
    e.preventDefault()
    setDraggedPost(post)
    
    const rect = e.currentTarget.getBoundingClientRect()
    setDragOffset({
      x: e.clientX - rect.left,
      y: e.clientY - rect.top
    })
  }

  const handleMouseMove = (e: MouseEvent) => {
    if (!draggedPost || !isDragMode) return
    
    e.preventDefault()
    const containerRect = feedContainerRef.current?.getBoundingClientRect()
    if (!containerRect) return

    const newX = e.clientX - containerRect.left - dragOffset.x
    const newY = e.clientY - containerRect.top - dragOffset.y

    setPosts(prevPosts => 
      prevPosts.map(post => 
        post.id === draggedPost.id 
          ? { ...post, position: { x: newX, y: newY } }
          : post
      )
    )
  }

  const handleMouseUp = () => {
    setDraggedPost(null)
  }

  const toggleLockPost = (postId: string) => {
    setPosts(prevPosts => 
      prevPosts.map(post => 
        post.id === postId 
          ? { ...post, isLocked: !post.isLocked }
          : post
      )
    )
  }

  const resetPostPositions = () => {
    setPosts(prevPosts => 
      prevPosts.map(post => ({ 
        ...post, 
        position: { x: 0, y: 0 },
        isLocked: false 
      }))
    )
  }

  // Event listeners ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mouse events
  useEffect(() => {
    if (isDragMode) {
      document.addEventListener('mousemove', handleMouseMove)
      document.addEventListener('mouseup', handleMouseUp)
      
      return () => {
        document.removeEventListener('mousemove', handleMouseMove)
        document.removeEventListener('mouseup', handleMouseUp)
      }
    }
  }, [draggedPost, isDragMode, dragOffset])

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏û‡∏™‡∏ï‡πå
  const handleLike = (postId: string, isLike: boolean) => {
    console.log(`${isLike ? '‡πÑ‡∏•‡∏Ñ‡πå' : '‡∏î‡∏¥‡∏™‡πÑ‡∏•‡∏Ñ‡πå'} ‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId}`)
    // ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö Supabase
  }

  const handleComment = (postId: string, comment: string) => {
    console.log(`‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô: ${comment} ‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId}`)
  }

  const handleShare = (postId: string) => {
    console.log(`‡πÅ‡∏ä‡∏£‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå ${postId}`)
  }

  const handleCreatePost = () => {
    if (newPost.trim()) {
      console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà:', newPost)
      setNewPost('')
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤
  const handleBuyItem = (itemId: string, price: number) => {
    if (mockUser.credits >= price) {
      console.log(`‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${itemId} ‡∏£‡∏≤‡∏Ñ‡∏≤ ${price} ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï`)
    } else {
      console.log('‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠')
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°
  const handleLoanRequest = () => {
    if (loanAmount && loanInterest && loanDuration) {
      console.log('‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°:', { loanAmount, loanInterest, loanDuration })
      setLoanAmount('')
      setLoanInterest('')
      setLoanDuration('')
    }
  }

  const handleApproveLoan = (loanId: string) => {
    console.log(`‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏° ${loanId}`)
  }

  // ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
  const filteredItems = mockShopItems.filter(item => {
    const matchesSearch = item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         item.description.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesCategory = selectedCategory === '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' || item.category === selectedCategory
    return matchesSearch && matchesCategory
  })

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-cyan-50 to-orange-50">
      {/* Header */}
      <header className="bg-white/80 backdrop-blur-md border-b border-blue-200 sticky top-0 z-50">
        <div className="container mx-auto px-4 py-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-gradient-to-r from-blue-600 to-cyan-600 rounded-lg">
                <Shark className="h-8 w-8 text-white" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-cyan-600 bg-clip-text text-transparent">
                  BergDotBet B.B.
                </h1>
                <p className="text-sm text-gray-600">Sharkcial - ‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏¢‡∏∏‡∏Ñ‡πÉ‡∏´‡∏°‡πà</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2 bg-gradient-to-r from-yellow-400 to-orange-500 text-white px-3 py-1 rounded-full">
                <Coins className="h-4 w-4" />
                <span className="font-semibold">{mockUser.credits.toLocaleString()}</span>
              </div>
              <Button variant="outline" size="sm">
                <Bell className="h-4 w-4 mr-1" />
                ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
              </Button>
              <Avatar className="h-8 w-8">
                <AvatarImage src={mockUser.avatar} alt={mockUser.name} />
                <AvatarFallback>{mockUser.name.slice(0, 2)}</AvatarFallback>
              </Avatar>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="container mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          
          {/* Sidebar - User Profile */}
          <div className="lg:col-span-1">
            <Card className="mb-6 bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
              <CardHeader className="pb-3">
                <div className="flex items-center space-x-3">
                  <Avatar className="h-16 w-16 border-4 border-gradient-to-r from-blue-500 to-cyan-500">
                    <AvatarImage src={mockUser.avatar} alt={mockUser.name} />
                    <AvatarFallback>{mockUser.name.slice(0, 2)}</AvatarFallback>
                  </Avatar>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2">
                      <h3 className="font-semibold text-gray-900">{mockUser.name}</h3>
                      {mockUser.verified && <ShieldCheck className="h-4 w-4 text-blue-500" />}
                    </div>
                    <p className="text-sm text-gray-600">{mockUser.username}</p>
                    <div className="flex items-center space-x-1 mt-1">
                      <Star className="h-3 w-3 text-yellow-500 fill-current" />
                      <span className="text-xs text-gray-600">Level {mockUser.level}</span>
                    </div>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-gray-700 mb-4">{mockUser.bio}</p>
                
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div className="text-center">
                    <p className="text-lg font-semibold text-blue-600">{mockUser.posts}</p>
                    <p className="text-xs text-gray-600">‡πÇ‡∏û‡∏™‡∏ï‡πå</p>
                  </div>
                  <div className="text-center">
                    <p className="text-lg font-semibold text-cyan-600">{mockUser.followers.toLocaleString()}</p>
                    <p className="text-xs text-gray-600">‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°</p>
                  </div>
                  <div className="text-center">
                    <p className="text-lg font-semibold text-orange-600">{mockUser.following}</p>
                    <p className="text-xs text-gray-600">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°</p>
                  </div>
                </div>

                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠</span>
                    <span className="font-semibold text-green-600">{mockUser.reputation}/5.0</span>
                  </div>
                  <Progress value={mockUser.reputation * 20} className="h-2" />
                </div>

                <Separator className="my-4" />
                
                <div className="space-y-2">
                  <h4 className="font-medium text-gray-900 flex items-center">
                    <Fish className="h-4 w-4 mr-2 text-blue-500" />
                    ‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                  </h4>
                  <div className="flex items-center justify-between p-2 bg-blue-50 rounded-lg">
                    <div className="flex items-center space-x-2">
                      <span className="text-2xl">{mockUser.currentPet.image}</span>
                      <div>
                        <p className="text-sm font-medium">{mockUser.currentPet.name}</p>
                        <p className="text-xs text-gray-600">Level {mockUser.currentPet.level}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-semibold text-green-600">+{mockUser.currentPet.creditsPerHour}</p>
                      <p className="text-xs text-gray-600">‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï/‡∏ä‡∏°.</p>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Quick Stats */}
            <Card className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
              <CardHeader>
                <CardTitle className="text-lg flex items-center">
                  <TrendingUp className="h-5 w-5 mr-2 text-green-500" />
                  ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">‡∏¢‡∏≠‡∏î‡πÉ‡∏´‡πâ‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°</span>
                    <span className="font-semibold text-green-600">{mockUser.totalLoaned.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">‡∏¢‡∏≠‡∏î‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°</span>
                    <span className="font-semibold text-orange-600">{mockUser.totalBorrowed.toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à</span>
                    <span className="font-semibold text-blue-600">{mockUser.successfulTrades}</span>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Main Content Area */}
          <div className="lg:col-span-3">
            <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
              <TabsList className="grid w-full grid-cols-5 bg-white/80 backdrop-blur-sm border border-blue-200">
                <TabsTrigger value="feed" className="flex items-center space-x-2">
                  <MessageCircle className="h-4 w-4" />
                  <span>‡∏ü‡∏µ‡∏î</span>
                </TabsTrigger>
                <TabsTrigger value="shop" className="flex items-center space-x-2">
                  <ShoppingCart className="h-4 w-4" />
                  <span>‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</span>
                </TabsTrigger>
                <TabsTrigger value="wallet" className="flex items-center space-x-2">
                  <Wallet className="h-4 w-4" />
                  <span>‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤</span>
                </TabsTrigger>
                <TabsTrigger value="loans" className="flex items-center space-x-2">
                  <HandCoins className="h-4 w-4" />
                  <span>‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°</span>
                </TabsTrigger>
                <TabsTrigger value="admin" className="flex items-center space-x-2">
                  <Settings className="h-4 w-4" />
                  <span>‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô</span>
                </TabsTrigger>
              </TabsList>

              {/* Feed Tab */}
              <TabsContent value="feed" className="space-y-6">
                {/* Drag Mode Controls */}
                <Card className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center justify-between">
                      <div className="flex items-center">
                        <Move className="h-5 w-5 mr-2 text-purple-500" />
                        ‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå
                      </div>
                      <div className="flex items-center space-x-2">
                        <Button
                          variant={isDragMode ? "default" : "outline"}
                          size="sm"
                          onClick={() => setIsDragMode(!isDragMode)}
                          className={isDragMode ? "bg-purple-600 hover:bg-purple-700" : ""}
                        >
                          {isDragMode ? <Lock className="h-4 w-4 mr-1" /> : <Unlock className="h-4 w-4 mr-1" />}
                          {isDragMode ? '‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á' : '‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á'}
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={resetPostPositions}
                          disabled={!isDragMode}
                        >
                          ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
                        </Button>
                      </div>
                    </CardTitle>
                  </CardHeader>
                  {isDragMode && (
                    <CardContent>
                      <div className="bg-purple-50 border border-purple-200 rounded-lg p-3">
                        <p className="text-sm text-purple-700 flex items-center">
                          <Info className="h-4 w-4 mr-2" />
                          ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏≤‡∏Å‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‚Ä¢ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Ñ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‚Ä¢ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Ñ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ
                        </p>
                      </div>
                    </CardContent>
                  )}
                </Card>

                {/* Create Post */}
                <Card className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <Plus className="h-5 w-5 mr-2 text-blue-500" />
                      ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <Textarea
                        value={newPost}
                        onChange={(e) => setNewPost(e.target.value)}
                        placeholder="‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡∏¥‡∏î‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏π‡πà? ‡πÅ‡∏ä‡∏£‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏±‡∏ö‡∏ä‡∏∏‡∏°‡∏ä‡∏ô Sharkcial..."
                        className="min-h-[100px] border-blue-200 focus:border-blue-500"
                      />
                      <div className="flex justify-between items-center">
                        <div className="flex items-center space-x-2 text-sm text-gray-600">
                          <Info className="h-4 w-4" />
                          <span>‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö +10 ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</span>
                        </div>
                        <Button 
                          onClick={handleCreatePost}
                          disabled={!newPost.trim()}
                          className="bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700"
                        >
                          <Send className="h-4 w-4 mr-2" />
                          ‡πÇ‡∏û‡∏™‡∏ï‡πå
                        </Button>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Posts Container */}
                <div 
                  ref={feedContainerRef}
                  className={`space-y-6 ${isDragMode ? 'relative min-h-[800px]' : ''}`}
                  style={{ cursor: isDragMode ? 'crosshair' : 'default' }}
                >
                  {posts.map((post) => (
                    <Card 
                      key={post.id} 
                      className={`bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg hover:shadow-xl transition-all duration-300 ${
                        isDragMode ? 'absolute cursor-move' : ''
                      } ${post.isLocked ? 'ring-2 ring-green-500' : ''} ${
                        draggedPost?.id === post.id ? 'z-50 shadow-2xl scale-105' : ''
                      }`}
                      style={isDragMode ? {
                        left: `${post.position.x}px`,
                        top: `${post.position.y}px`,
                        width: '600px',
                        maxWidth: '90vw'
                      } : {}}
                      onMouseDown={(e) => !post.isLocked && handleMouseDown(e, post)}
                    >
                      <CardHeader className="pb-3">
                        <div className="flex items-center space-x-3">
                          <Avatar className="h-10 w-10">
                            <AvatarImage src={post.user.avatar} alt={post.user.name} />
                            <AvatarFallback>{post.user.name.slice(0, 2)}</AvatarFallback>
                          </Avatar>
                          <div className="flex-1">
                            <div className="flex items-center space-x-2">
                              <h4 className="font-semibold text-gray-900">{post.user.name}</h4>
                              {post.user.verified && <ShieldCheck className="h-4 w-4 text-blue-500" />}
                            </div>
                            <p className="text-sm text-gray-600">{post.user.username} ‚Ä¢ {post.timestamp}</p>
                          </div>
                          <div className="flex items-center space-x-2">
                            {isDragMode && (
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={(e) => {
                                  e.stopPropagation()
                                  toggleLockPost(post.id)
                                }}
                                className={`${post.isLocked ? 'text-green-600 bg-green-50' : 'text-gray-400'}`}
                              >
                                {post.isLocked ? <Lock className="h-4 w-4" /> : <Unlock className="h-4 w-4" />}
                              </Button>
                            )}
                            {isDragMode && !post.isLocked && (
                              <GripVertical className="h-4 w-4 text-gray-400" />
                            )}
                            <Button variant="ghost" size="sm">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <p className="text-gray-800 mb-4">{post.content}</p>
                        
                        {post.image && (
                          <div className="mb-4 rounded-lg overflow-hidden">
                            <img 
                              src={post.image} 
                              alt="Post content" 
                              className="w-full h-64 object-cover hover:scale-105 transition-transform duration-300"
                            />
                          </div>
                        )}

                        {post.tags && (
                          <div className="flex flex-wrap gap-2 mb-4">
                            {post.tags.map((tag, index) => (
                              <Badge key={index} variant="secondary" className="text-xs">
                                #{tag}
                              </Badge>
                            ))}
                          </div>
                        )}

                        <div className="flex items-center justify-between pt-3 border-t border-gray-200">
                          <div className="flex items-center space-x-4">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleLike(post.id, true)}
                              className="flex items-center space-x-2 hover:text-green-600 hover:bg-green-50"
                            >
                              <ThumbsUp className="h-4 w-4" />
                              <span>{post.likes}</span>
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleLike(post.id, false)}
                              className="flex items-center space-x-2 hover:text-red-600 hover:bg-red-50"
                            >
                              <ThumbsDown className="h-4 w-4" />
                              <span>{post.dislikes}</span>
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              className="flex items-center space-x-2 hover:text-blue-600 hover:bg-blue-50"
                            >
                              <MessageSquare className="h-4 w-4" />
                              <span>{post.comments}</span>
                            </Button>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleShare(post.id)}
                              className="flex items-center space-x-2 hover:text-purple-600 hover:bg-purple-50"
                            >
                              <Share2 className="h-4 w-4" />
                              <span>{post.shares}</span>
                            </Button>
                          </div>
                          {isDragMode && (
                            <Badge variant={post.isLocked ? "default" : "secondary"} className="text-xs">
                              {post.isLocked ? '‡∏•‡πá‡∏≠‡∏Ñ‡πÅ‡∏•‡πâ‡∏ß' : '‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ'}
                            </Badge>
                          )}
                        </div>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </TabsContent>

              {/* Shop Tab */}
              <TabsContent value="shop" className="space-y-6">
                {/* Search and Filter */}
                <Card className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <Store className="h-5 w-5 mr-2 text-green-500" />
                      ‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ Sharkcial
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="flex flex-col md:flex-row gap-4">
                      <div className="flex-1">
                        <div className="relative">
                          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                          <Input
                            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="pl-10 border-blue-200 focus:border-blue-500"
                          />
                        </div>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Filter className="h-4 w-4 text-gray-500" />
                        <select
                          value={selectedCategory}
                          onChange={(e) => setSelectedCategory(e.target.value)}
                          className="px-3 py-2 border border-blue-200 rounded-md focus:outline-none focus:border-blue-500"
                        >
                          <option value="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</option>
                          <option value="‡∏ò‡∏µ‡∏°">‡∏ò‡∏µ‡∏°</option>
                          <option value="‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á">‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</option>
                          <option value="‡∏Å‡∏£‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå">‡∏Å‡∏£‡∏≠‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå</option>
                          <option value="‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥">‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥</option>
                        </select>
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Shop Items */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredItems.map((item) => (
                    <Card key={item.id} className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg hover:shadow-xl transition-shadow duration-300">
                      <CardHeader className="pb-3">
                        <div className="aspect-square rounded-lg overflow-hidden mb-3">
                          <img 
                            src={item.image} 
                            alt={item.name}
                            className="w-full h-full object-cover hover:scale-105 transition-transform duration-300"
                          />
                        </div>
                        <div className="flex items-center justify-between">
                          <Badge variant="outline" className={`text-xs ${
                            item.rarity === 'Legendary' ? 'border-yellow-500 text-yellow-700' :
                            item.rarity === 'Epic' ? 'border-purple-500 text-purple-700' :
                            item.rarity === 'Rare' ? 'border-blue-500 text-blue-700' :
                            'border-gray-500 text-gray-700'
                          }`}>
                            {item.rarity}
                          </Badge>
                          <div className="flex items-center space-x-1">
                            <Star className="h-3 w-3 text-yellow-500 fill-current" />
                            <span className="text-xs text-gray-600">{item.rating}</span>
                          </div>
                        </div>
                      </CardHeader>
                      <CardContent>
                        <h3 className="font-semibold text-gray-900 mb-2">{item.name}</h3>
                        <p className="text-sm text-gray-600 mb-4">{item.description}</p>
                        
                        <div className="flex items-center justify-between mb-4">
                          <div className="flex items-center space-x-2">
                            <Coins className="h-4 w-4 text-yellow-500" />
                            <span className="font-semibold text-lg text-gray-900">{item.price.toLocaleString()}</span>
                          </div>
                          <span className="text-xs text-gray-500">‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß {item.sales.toLocaleString()}</span>
                        </div>

                        <Button 
                          onClick={() => handleBuyItem(item.id, item.price)}
                          disabled={mockUser.credits < item.price}
                          className="w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 disabled:from-gray-400 disabled:to-gray-500"
                        >
                          {mockUser.credits >= item.price ? '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏•‡∏¢' : '‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'}
                        </Button>
                      </CardContent>
                    </Card>
                  ))}
                </div>
              </TabsContent>

              {/* Wallet Tab */}
              <TabsContent value="wallet" className="space-y-6">
                <Card className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <Wallet className="h-5 w-5 mr-2 text-blue-500" />
                      ‡∏Å‡∏£‡∏∞‡πÄ‡∏õ‡πã‡∏≤‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï SharkWallet
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="text-center mb-6">
                      <div className="text-4xl font-bold text-blue-600 mb-2">
                        {mockUser.credits.toLocaleString()}
                      </div>
                      <p className="text-gray-600">‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                      <div className="text-center p-4 bg-green-50 rounded-lg">
                        <TrendingUp className="h-8 w-8 text-green-600 mx-auto mb-2" />
                        <p className="text-lg font-semibold text-green-600">+2,450</p>
                        <p className="text-sm text-gray-600">‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
                      </div>
                      <div className="text-center p-4 bg-orange-50 rounded-lg">
                        <TrendingDown className="h-8 w-8 text-orange-600 mx-auto mb-2" />
                        <p className="text-lg font-semibold text-orange-600">-890</p>
                        <p className="text-sm text-gray-600">‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</p>
                      </div>
                      <div className="text-center p-4 bg-purple-50 rounded-lg">
                        <PiggyBank className="h-8 w-8 text-purple-600 mx-auto mb-2" />
                        <p className="text-lg font-semibold text-purple-600">+125</p>
                        <p className="text-sm text-gray-600">‡∏à‡∏≤‡∏Å‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á</p>
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Button className="bg-gradient-to-r from-blue-600 to-cyan-600 hover:from-blue-700 hover:to-cyan-700">
                        <ArrowUp className="h-4 w-4 mr-2" />
                        ‡πÇ‡∏≠‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
                      </Button>
                      <Button variant="outline" className="border-blue-200 hover:bg-blue-50">
                        <ArrowDown className="h-4 w-4 mr-2" />
                        ‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* Transaction History */}
                <Card className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <Activity className="h-5 w-5 mr-2 text-purple-500" />
                      ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {[
                        { type: '‡∏£‡∏±‡∏ö', amount: '+250', description: '‡πÑ‡∏•‡∏Ñ‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå', time: '10 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß', icon: Heart },
                        { type: '‡∏à‡πà‡∏≤‡∏¢', amount: '-1,500', description: '‡∏ã‡∏∑‡πâ‡∏≠‡∏ò‡∏µ‡∏° Golden Shark', time: '2 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß', icon: ShoppingCart },
                        { type: '‡∏£‡∏±‡∏ö', amount: '+500', description: '‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà', time: '4 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß', icon: MessageCircle },
                        { type: '‡∏£‡∏±‡∏ö', amount: '+25', description: '‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ú‡∏•‡∏¥‡∏ï', time: '1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß', icon: Fish }
                      ].map((transaction, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center space-x-3">
                            <div className={`p-2 rounded-full ${
                              transaction.type === '‡∏£‡∏±‡∏ö' ? 'bg-green-100' : 'bg-red-100'
                            }`}>
                              <transaction.icon className={`h-4 w-4 ${
                                transaction.type === '‡∏£‡∏±‡∏ö' ? 'text-green-600' : 'text-red-600'
                              }`} />
                            </div>
                            <div>
                              <p className="font-medium text-gray-900">{transaction.description}</p>
                              <p className="text-sm text-gray-600">{transaction.time}</p>
                            </div>
                          </div>
                          <span className={`font-semibold ${
                            transaction.type === '‡∏£‡∏±‡∏ö' ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {transaction.amount}
                          </span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Loans Tab */}
              <TabsContent value="loans" className="space-y-6">
                {/* Loan Request Form */}
                <Card className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <HandCoins className="h-5 w-5 mr-2 text-green-500" />
                      ‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                      <div>
                        <Label htmlFor="loanAmount">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï</Label>
                        <Input
                          id="loanAmount"
                          type="number"
                          placeholder="‡πÄ‡∏ä‡πà‡∏ô 5000"
                          value={loanAmount}
                          onChange={(e) => setLoanAmount(e.target.value)}
                          className="border-blue-200 focus:border-blue-500"
                        />
                      </div>
                      <div>
                        <Label htmlFor="loanInterest">‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢ (%/‡∏ß‡∏±‡∏ô)</Label>
                        <Input
                          id="loanInterest"
                          type="number"
                          step="0.1"
                          placeholder="‡πÄ‡∏ä‡πà‡∏ô 2.0"
                          value={loanInterest}
                          onChange={(e) => setLoanInterest(e.target.value)}
                          className="border-blue-200 focus:border-blue-500"
                        />
                      </div>
                      <div>
                        <Label htmlFor="loanDuration">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ß‡∏±‡∏ô)</Label>
                        <Input
                          id="loanDuration"
                          type="number"
                          placeholder="‡πÄ‡∏ä‡πà‡∏ô 7"
                          value={loanDuration}
                          onChange={(e) => setLoanDuration(e.target.value)}
                          className="border-blue-200 focus:border-blue-500"
                        />
                      </div>
                    </div>
                    <Button 
                      onClick={handleLoanRequest}
                      disabled={!loanAmount || !loanInterest || !loanDuration}
                      className="w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                    >
                      ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°
                    </Button>
                  </CardContent>
                </Card>

                {/* Available Loans */}
                <Card className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <DollarSign className="h-5 w-5 mr-2 text-blue-500" />
                      ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {mockLoans.map((loan) => (
                        <div key={loan.id} className="p-4 border border-blue-200 rounded-lg hover:shadow-md transition-shadow">
                          <div className="flex items-center justify-between mb-3">
                            <div className="flex items-center space-x-3">
                              <Avatar className="h-10 w-10">
                                <AvatarFallback>{loan.borrower.slice(0, 2)}</AvatarFallback>
                              </Avatar>
                              <div>
                                <h4 className="font-semibold text-gray-900">{loan.borrower}</h4>
                                <div className="flex items-center space-x-1">
                                  <Star className="h-3 w-3 text-yellow-500 fill-current" />
                                  <span className="text-sm text-gray-600">{loan.reputation}/5.0</span>
                                </div>
                              </div>
                            </div>
                            <Badge variant={
                              loan.status === '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' ? 'secondary' :
                              loan.status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß' ? 'default' : 'outline'
                            }>
                              {loan.status}
                            </Badge>
                          </div>
                          
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-3">
                            <div>
                              <p className="text-sm text-gray-600">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</p>
                              <p className="font-semibold text-blue-600">{loan.amount.toLocaleString()}</p>
                            </div>
                            <div>
                              <p className="text-sm text-gray-600">‡∏î‡∏≠‡∏Å‡πÄ‡∏ö‡∏µ‡πâ‡∏¢</p>
                              <p className="font-semibold text-green-600">{loan.interestRate}%/‡∏ß‡∏±‡∏ô</p>
                            </div>
                            <div>
                              <p className="text-sm text-gray-600">‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤</p>
                              <p className="font-semibold text-orange-600">{loan.duration}</p>
                            </div>
                            <div>
                              <p className="text-sm text-gray-600">‡∏´‡∏•‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô</p>
                              <p className="font-semibold text-purple-600 text-xs">{loan.collateral}</p>
                            </div>
                          </div>

                          <p className="text-sm text-gray-700 mb-3">
                            <strong>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:</strong> {loan.purpose}
                          </p>

                          {loan.status === '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥' && (
                            <Button 
                              onClick={() => handleApproveLoan(loan.id)}
                              size="sm"
                              className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700"
                            >
                              ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°
                            </Button>
                          )}
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              {/* Admin Tab */}
              <TabsContent value="admin" className="space-y-6">
                <Card className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <Settings className="h-5 w-5 mr-2 text-gray-500" />
                      ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                      <div className="text-center p-4 bg-blue-50 rounded-lg">
                        <Users className="h-8 w-8 text-blue-600 mx-auto mb-2" />
                        <p className="text-2xl font-bold text-blue-600">1,234</p>
                        <p className="text-sm text-gray-600">‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                      </div>
                      <div className="text-center p-4 bg-green-50 rounded-lg">
                        <MessageCircle className="h-8 w-8 text-green-600 mx-auto mb-2" />
                        <p className="text-2xl font-bold text-green-600">5,678</p>
                        <p className="text-sm text-gray-600">‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</p>
                      </div>
                      <div className="text-center p-4 bg-yellow-50 rounded-lg">
                        <Coins className="h-8 w-8 text-yellow-600 mx-auto mb-2" />
                        <p className="text-2xl font-bold text-yellow-600">2.5M</p>
                        <p className="text-sm text-gray-600">‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö</p>
                      </div>
                      <div className="text-center p-4 bg-purple-50 rounded-lg">
                        <HandCoins className="h-8 w-8 text-purple-600 mx-auto mb-2" />
                        <p className="text-2xl font-bold text-purple-600">89</p>
                        <p className="text-sm text-gray-600">‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡∏°‡πà</p>
                      </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <Button variant="outline" className="flex items-center justify-center space-x-2">
                        <Shield className="h-4 w-4" />
                        <span>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢</span>
                      </Button>
                      <Button variant="outline" className="flex items-center justify-center space-x-2">
                        <BarChart3 className="h-4 w-4" />
                        <span>‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥</span>
                      </Button>
                      <Button variant="outline" className="flex items-center justify-center space-x-2">
                        <Store className="h-4 w-4" />
                        <span>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤</span>
                      </Button>
                      <Button variant="outline" className="flex items-center justify-center space-x-2">
                        <Users className="h-4 w-4" />
                        <span>‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ</span>
                      </Button>
                    </div>
                  </CardContent>
                </Card>

                {/* System Health */}
                <Card className="bg-white/80 backdrop-blur-sm border-blue-200 shadow-lg">
                  <CardHeader>
                    <CardTitle className="text-lg flex items-center">
                      <Activity className="h-5 w-5 mr-2 text-green-500" />
                      ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {[
                        { name: '‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å', status: '‡∏õ‡∏Å‡∏ï‡∏¥', uptime: '99.9%', color: 'green' },
                        { name: '‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', status: '‡∏õ‡∏Å‡∏ï‡∏¥', uptime: '99.8%', color: 'green' },
                        { name: '‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', status: '‡∏õ‡∏Å‡∏ï‡∏¥', uptime: '99.7%', color: 'green' },
                        { name: '‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', status: '‡∏ö‡∏≥‡∏£‡∏∏‡∏á‡∏£‡∏±‡∏Å‡∏©‡∏≤', uptime: '95.2%', color: 'yellow' }
                      ].map((system, index) => (
                        <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center space-x-3">
                            <div className={`w-3 h-3 rounded-full ${
                              system.color === 'green' ? 'bg-green-500' : 
                              system.color === 'yellow' ? 'bg-yellow-500' : 'bg-red-500'
                            }`}></div>
                            <span className="font-medium text-gray-900">{system.name}</span>
                          </div>
                          <div className="text-right">
                            <p className="text-sm font-semibold text-gray-900">{system.status}</p>
                            <p className="text-xs text-gray-600">Uptime: {system.uptime}</p>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </main>
    </div>
  )
}